<?php

namespace Tests\Feature;

use App\Rules\Recaptcha;
use App\Thread;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class CreateThreadsTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $m = \Mockery::mock(Recaptcha::class);

        $m->shouldReceive('passes')->once()->andReturn(true);

        app()->singleton(Recaptcha::class,$m);
    }


    /** @test */
    public function new_users_must_first_confirm_their_email_address_before_creating_threads()
    {

        $user =factory('App\User')->states('unconfirmed')->create();
        $this->withExceptionHandling()->signIn($user);
        $thread = make('App\Thread');


        $this->post('/threads',$thread->toArray())
            ->assertRedirect('/threads')
            ->assertSessionHas('flash','You must first confirm you email address.');
    }
    
    
    
    /** @test */
    public function guests_may_not_create_threads()
    {

        $this->withExceptionHandling();
            //不可以看到创建页面
            $this->get('/threads/create')
            ->assertRedirect('/login');
            //不可以创建
            $this->post('/threads')
                ->assertRedirect('/login');

    }



    /** @test */
    public function an_authenticated_user_can_create_new_forum_threads()
    {
        // Given we have a signed in user
        $this->signIn();

        // When we hit the endpoint to cteate a new thread
        $thread = make('App\Thread');
        $response=$this->post('/threads',$thread->toArray()+['g-recaptcha-response'=>'token']);
        // Then,when we visit the thread
        // We should see the new thread

        $this->get($response->headers->get('Location'))
            ->assertSee($thread->title)
            ->assertSee($thread->body);
    }

    /** @test */
    public function a_thread_requires_a_title()
    {
        $this->publishThread(['title'=>null])
            ->assertSessionHasErrors('title');

    }

    /** @test */
    public function a_thread_requires_a_body()
    {
        $this->publishThread(['body'=>null])
            ->assertSessionHasErrors('body');
    }

    /** @test */
    public function a_thread_requires_recaptcha_verification()
    {
        unset(app()[Recaptcha::class]);
        $this->publishThread(['g-recaptcha-response'=>'test'])
            ->assertSessionHasErrors('g-recaptcha-response');
    }

    /** @test */
    public function a_thread_requires_a_valid_channel()
    {
        factory('App\Channel',2)->create();


        $this->publishThread(['channel_id'=>null])
            ->assertSessionHasErrors('channel_id');
        $this->publishThread(['channel_id'=>999])
            ->assertSessionHasErrors('channel_id');
    }
    
    
    /** @test */
    public function a_thread_requires_a_unique_slug()
    {

       $this->signIn();
       $thread = create('App\Thread',['title'=>'Foo Title']);

       $this->assertEquals($thread->refresh()->slug,'foo-title');

        $response=$this->post('/threads',$thread->toArray());


        $this->assertTrue(Thread::whereSlug('foo-title-2')->exists());

        $response=$this->post('/threads',$thread->toArray());

        $this->assertTrue(Thread::whereSlug('foo-title-3')->exists());
    }

    /** @test */
    public function a_thread_with_a_title_that_ends_in_a_number_should_generate_the_proper_slug()
    {

        $this->signIn();
        $thread = create('App\Thread',['title'=>'Some Title 24', 'slug' =>'some-title-24']);

        $response=$this->post('/threads',$thread->toArray());

        $this->assertTrue(Thread::whereSlug('some-title-24-2')->exists());
    }


    public function publishThread($overrides = [])
    {

        $this->withExceptionHandling()->signIn();
        $thread=make('App\Thread',$overrides);

        return $this->post('/threads',$thread->toArray());

    }

    /** @test */
    public function unauthorized_users_may_not_delete_threads()
    {
        $this->withExceptionHandling();
        $thread = create('App\Thread');
        $response=$this->delete($thread->path());
        $response->assertRedirect('/login');

        $this->signIn();
        $response=$this->delete($thread->path())->assertStatus(403);


    }
    
    /** @test */
    public function authorized_user_can_deleted_thread()
    {
        $this->signIn();

        $thread = create('App\Thread',['user_id'=>auth()->id()]);

        $reply = create('App\Reply',['thread_id'=>$thread->id]);
        $response=$this->json('DELETE',$thread->path());
        $response->assertStatus(204);
        $this->assertDatabaseMissing('threads',['id'=>$thread->id]);
        $this->assertDatabaseMissing('replies',['id'=>$reply->id]);
        $this->assertDatabaseMissing('activities',[
            'subject_id'=>$thread->id,
            'subject_type'=>get_class($thread)
        ]);
        $this->assertDatabaseMissing('activities',[
            'subject_id'=>$reply->id,
            'subject_type'=>get_class($reply)
        ]);
    }



}